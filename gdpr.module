<?php

/**
 * @file
 * Contains hook implementations and shared functions.
 */

/**
 * Implements hook_help().
 */
function gdpr_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gdpr':
      return t('Provides help for making your drupal site GDPR-compliant.');
  }
}

/**
 * Implements hook_menu().
 */
function gdpr_menu() {
  $items['user/%user/collected_data'] = [
    'title' => 'All your data',
    'page callback' => 'gdpr_collected_user_data',
    'page arguments' => [1],
    'access callback' => 'gdpr_collected_user_data_access',
    'access arguments' => [1],
    'type' => MENU_LOCAL_TASK,
  ];
  return $items;
}

/**
 * Implements hook_theme().
 */
function gdpr_theme() {
  return [
    'user_data_page' => [
      'template' => 'gdpr-user-data-page',
      'path' => drupal_get_path('module', 'gdpr') . '/templates',
    ],
  ];
}

/**
 * Implements hook_checklistapi_checklist_info().
 */
function gdpr_checklistapi_checklist_info() {
  $definitions = [];
  $definitions['gdpr_checklist'] = [
    '#title' => t('GDPR Checklist'),
    '#path' => 'admin/config/gdpr/checklist',
    '#description' => t('GDPR Checklist'),
    '#help' => t('<p>Complete this checklist to make your site GDPR-compliant.</p>'),
    'getting_started' => [
      '#title' => t('Getting Started'),
      '#description' => t('<p>To begin your self-assessment process, it\'s highly recommended to take the following steps:</p>'),
      'responsability_agreement' => [
        '#title' => t('Yes, I agree that by using the <em>GDPR</em> module, I\'m still accountable for personal data handling performed on the site.'),
        '#description' => t('Responsibility Agreement: before the site owner starts the checklist process, they should acknowledge that installing and using this module pack does not mean sharing responsibility. Neither the Drupal Community nor module maintainers can guarantee full compliance with these regulations in case of potential control or audit.'),
      ],
      'recommended_resources' => [
        '#title' => t('Yes, I have read at least one of the following recommended resources from the list below'),
        'technical_approach' => [
          '#text' => t('General summary of technical approach'),
          '#path' => t('https://edps.europa.eu/about-edps/data-protection-within-edps/data-protection-legal-notices_en'),
        ],
        'marketing_viewpoint' => [
          '#text' => t('General summary of marketing viewpoint'),
          '#path' => t('https://www.eugdpr.org/eugdpr.org.html'),
        ],
        'legal_viewpoint' => [
          '#text' => t('General summary of Legal viewpoint'),
          '#path' => t('https://webdevlaw.uk/data-protection-gdpr'),
        ]
      ]
    ],
    'policies' => [
      '#title' => t('Policies and other measures'),
      '#description' => t('<p>Modules or libraries that already implement some of the needed features.</p>'),
      'data1' => [
        '#title' => t('Cookie policy'),
        '#description' => t('User needs to be informed when your site uses cookies to collect data.'),
        'handbook_page' => [
          '#text' => t('EU Cookie Compliance-module'),
          '#path' => 'https://www.drupal.org/project/eu_cookie_compliance',
        ],
      ],
    ],
    'content_related_suggestions' => [
      '#title' => t('Content related suggestions'),
      '#description' => t('<p>Automated search performed on uploaded content of site.</p>'),
      'privacy_policy_page' => [
        '#title' => t('I have checked through the uploaded content and verified that a page containing <em>Privacy Policy</em> exists and has been published to this site.'),
        '#description' => t('No nodes with the following terms have been found: "Privacy Policy", "Terms of Use", "About us" or "Impressum". Please verify manually that such content of similar titles exists and has been published.'),
      ],
      'privacy_policy_published' => [
        '#title' => t('I confirm the existing "Privacy Policy" has been published.'),
        '#description' => t('This <em>GDPR</em> module does not automatically affect publishing status of site content. Therefore, even if such information has been uploaded (regarding the previous point), then you must make sure that this content is available to visitors.'),
      ],
      'privacy_policy_in_menu' => [
        '#title' => t('I confirm the published "Privacy Policy" is included in at least one menu of the site.'),
        '#description' => t('To ensure best practice, it\'s strongly recommended to divulge personal data handling guidelines on the site by including a link to the guidelines page in a generally displayed menu in clear view on the site layout.'),
      ]
    ],
    'configuration' => [
      '#title' => t('Configuration'),
      '#description' => t('<p>Things you can can do by just making changes in your site configuration</p>'),
      'cancel_account' => [
        '#title' => t('Allow users to cancel their own user account'),
        'permission' => [
          '#text' => t('Permissions for "Cancel own user account"'),
          '#path' => '/admin/people/permissions',
          '#options' => [
            'fragment' => 'module-user',
          ],
        ],
      ],
      'delete_data' => [
        '#title' => t('Users need to be able to request for removal of all their personal data.'),
        'account_config' => [
          '#text' => t('Account configuration for "Delete the account and make its content belong to the Anonymous user"'),
          '#path' => '/admin/config/people/accounts',
        ],
      ],
    ],
  ];
  return $definitions;
}

/**
 * Implements a page callback to render a user's GDPR data collection page.
 *
 * @param \stdClass $user
 *   The user entity.
 *
 * @return string
 *   The rendered page.
 */
function gdpr_collected_user_data(\stdClass $user) {
  drupal_set_title(t('Data stored about you'));
  $user_data = gdpr_get_user_data($user);
  $output    = theme('user_data_page', [
    'user_data' => $user_data,
  ]);
  return $output;
}

/**
 * Implements an access callback to a user's GDPR data collection page.
 *
 * @param \stdClass $user
 *   The user entity.
 *
 * @return bool
 *   Whether or not the current user has access.
 */
function gdpr_collected_user_data_access(\stdClass $user) {
  return $GLOBALS['user']->uid == $user->uid;
}

/**
 * Gets all collected data for the given user.
 *
 * @param \stdClass $user
 *   The user entity.
 *
 * @return array
 *   Keys are data machine names, and values the collected data itself.
 */
function gdpr_get_user_data(\stdClass $user) {
  foreach ($user as $key => $value) {
    if (is_scalar($value)) {
      $user_data[$key] = $value;
    }
    elseif (is_array($value)) {
      $scalar_list = TRUE;
      foreach ($value as $item) {
        if (!is_scalar($item)) {
          $scalar_list = FALSE;
          break;
        }
      }
      if ($scalar_list) {
        $user_data[$key] = implode(", ", $value);
      }
    }
  }

  $user_data['pass'] = gdpr_star_value($user_data['pass']);

  ksort($user_data);

  return $user_data;
}

/**
 * Censors a string by replacing all characters with asterisks.
 *
 * @param string $value
 *   The value to censor.
 *
 * @return string
 *   The censored value.
 */
function gdpr_star_value($value) {
  return str_repeat("*", strlen($value));
}
