<?php

/**
 * @file
 * Contains hook implementations and shared functions.
 */

/**
 * Implements hook_menu().
 */
function gdpr_menu() {
  $items['user/%user/collected_data'] = array(
    'title' => 'All your data',
    'page callback' => 'gdpr_collected_user_data',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements a page callback to render a user's GDPR data collection page.
 *
 * @return string
 *   The rendered page.
 */
function gdpr_collected_user_data() {
  $user_data = gdpr_get_user_data();
  $output    = theme('user_data_page', array(
    'user_data' => $user_data,
  ));
  return $output;
}

/**
 * Gets all collected data for the current user.
 *
 * @return array
 *   Keys are data machine names, and values the collected data itself.
 */
function gdpr_get_user_data() {
  global $user;
  $account = user_load($user->uid);

  foreach ($account as $key => $value) {
    $type = gettype($value);

    if ($key === 'roles') {
      $user_data[$key] = implode(", ", $value);
    }
    elseif ($type != 'array' && $type != 'object' && $type != 'resource') {
      $user_data[$key] = $value;
    }
    else {
      $user_data[$key] = $value[LANGUAGE_NONE][0]['safe_value'];
    }
  }

  $user_data['pass'] = gdpr_star_value($user_data['pass']);

  ksort($user_data);

  return $user_data;
}

/**
 * Censors a string by replacing all characters with asterisks.
 *
 * @param string $value
 *   The value to censor.
 *
 * @return string
 *   The censored value.
 */
function gdpr_star_value($value) {
  return str_repeat("*", strlen($value));
}

/**
 * Implements hook_checklistapi_checklist_info().
 */
function gdpr_checklistapi_checklist_info() {
  $definitions = array();
  $definitions['gdpr_checklist'] = array(
    '#title' => t('GDPR Checklist'),
    '#path' => 'admin/config/gdpr/checklist',
    '#description' => t('GDPR Checklist'),
    '#help' => t('<p>Complete this checklist to make your site GDPR-compliant.</p>'),
    'modules' => array(
      '#title' => t('Modules and features'),
      '#description' => t('<p>Modules or libraries that already implement some of the needed features.</p>'),
      'cookie_policy' => array(
        '#title' => t('Cookie policy'),
        '#description' => t('User needs to be informed when your site uses cookies to collect data.'),
        'handbook_page' => array(
          '#text' => t('EU Cookie Compliance-module'),
          '#path' => 'https://www.drupal.org/project/eu_cookie_compliance',
        ),
      ),
    ),
    'configuration' => array(
      '#title' => t('Configuration'),
      '#description' => t('<p>Things you can can do by just making changes in your site configuration'),
      'delete_data' => array(
        '#title' => t('Users need to be able to request for removal of all their personal data.'),
        'handbook_page_upgrading' => array(
          '#text' => t('Account configuration'),
          '#path' => 'admin/config/people/accounts',
        ),
      ),
    ),
    'policies' => array(
      '#title' => t('Policies and other measures'),
      '#description' => t('<p>Modules or libraries that already implement some of the needed features.</p>'),
      'data1' => array(
        '#title' => t('Cookie policy'),
        '#description' => t('User needs to be informed when your site uses cookies to collect data.'),
        'handbook_page' => array(
          '#text' => t('EU Cookie Compliance-module'),
          '#path' => 'https://www.drupal.org/project/eu_cookie_compliance',
        ),
      ),
    ),
  );
  return $definitions;
}

/**
 * Implements hook_theme().
 */
function gdpr_theme() {
  return array(
    'user_data_page' => array(
      // Add default variables if needed
      // 'variables' => array(
      // ),
      'template' => 'gdpr-user-data-page',
      'path' => drupal_get_path('module', 'gdpr') . '/templates',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gdpr_preprocess_user_data_page(&$vars) {
  drupal_add_css(drupal_get_path('module', 'gdpr') . '/css/user_data.css', array());
  // Placeholder incase we need to add or change variables for the template.
  $vars['custom_value'] = 'custom text';
}
